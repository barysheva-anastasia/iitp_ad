{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a7973ccf",
   "metadata": {},
   "source": [
    "# Домашнее задание 1. \n",
    "\n",
    "-  \"Оптимальность\" наивного Байесовского классификатора\n",
    "- Оценка \"важности\" признаков (feature importance)\n",
    "\n",
    "Для тех кто не знаком с библиотекой pandas я рекомендую вот эти два практических туториала:\n",
    "\n",
    "-  https://nbviewer.jupyter.org/github/justmarkham/pandas-videos/blob/master/pandas.ipynb (1-3 часа на прохождение, 30 вопросов с видео разборами)\n",
    "- https://github.com/guipsamora/pandas_exercises/ 11 топиков покрывающих весь основной функционал библиотеки\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df3f9952",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7104cd39",
   "metadata": {},
   "source": [
    "## 1. Наивный Байес\n",
    "\n",
    "Ваша задача сравнить вероятности получаемые наивным байесовским классификатором с вероятностями получаемыми если не делать предположения о независимости признаков. Мы будем делать это для 2 признаков рассмотренных на семинаре: Пол и Класс билета (пассажира)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d081a96",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08916921",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('../data/titanic_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8497c59",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.DataFrame()\n",
    "\n",
    "X['Sex'] = df['Sex'].map({\n",
    "    'Male':0,\n",
    "    'Female':1\n",
    "})\n",
    "X['PassengerClass'] = df['Passenger Class'].map({\n",
    "    'First': 1,\n",
    "    'Second': 2,\n",
    "    'Third': 3\n",
    "})\n",
    "\n",
    "X['Survived'] = df['Survived'].map({\n",
    "    'Yes': 1,\n",
    "    'No': 0\n",
    "})\n",
    "\n",
    "y = X['Survived']\n",
    "X = X.drop(['Survived'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa5b8080",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "884ee769",
   "metadata": {},
   "source": [
    "## 1.1 Разделим данные на тренировочную и тестовую части 70-30\n",
    "\n",
    "сколько наблюдений оказалось в тренировочной и тестовой выборках?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bff7a804",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33ea4670",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.70, random_state=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41e9d7df",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bdf6e1fc",
   "metadata": {},
   "source": [
    "## 1.2 Реализуйте функцию `get_probability_survived_bayes`\n",
    "\n",
    "Которая считает честные вероятности выживания при условии заданного класса билета и пола:\n",
    "\n",
    "$$\n",
    "P(\\text{y}|\\text{Sex}, \\text{Passenger Class}) = \\frac{p(\\text{Sex}|\\text{Passenger Class}, \\text{y}) p(\\text{Passenger Class}|\\text{ y}) p(\\text{y})}{p(\\text{Sex}|\\text{Passenger Class}) p(\\text{Passenger Class})}\n",
    "$$\n",
    "\n",
    "## Помните что оценка вероятностей всегда должна происходить на тренировчной выборке."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01177ce2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c477f9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hint 1. Используйте pandas.groupby\n",
    "# Hint 2. Вы возвращаете tuple p_not_survived, p_survived, в котором\n",
    "# вероятность выжить находится на второй позиции, чтобы когда вы берете аргмакс получать метки классов 0/1 (не выжил/выжил)\n",
    "\n",
    "def get_probability_survived_bayes(pclass: int, sex: int) -> Tuple[float, float]:\n",
    "    '''Given `Passenger Class` and `Sex` returns true probabilities tuple(p_not_survived, p_survived)'''\n",
    "    ...\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9d25923",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "dc7484a1",
   "metadata": {},
   "source": [
    "## 1.3 Реализуйте функцию `get_probability_survived_bayes_naive`\n",
    "\n",
    "Которая оценивает вероятность выжить в предположении о независимости признаков\n",
    "\n",
    "$$\n",
    "P(\\text{y}|\\text{Sex}, \\text{Passenger Class}) = \\frac{p(\\text{Sex}|\\text{y}) p(\\text{Passenger Class}|\\text{ y}) p(\\text{y})}{p(\\text{Sex}) p(\\text{Passenger Class})}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ee72a95",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_probability_survived_bayes_naive(pclass: int, sex: int) -> Tuple[float, float]:\n",
    "    '''Given `Passenger Class` and `Sex` returns tuple(p_not_survived, p_survived), \n",
    "    under naive assumption of features independence'''\n",
    "    ...\n",
    "    \n",
    "# Hint 1. Поскольку вы делаете предположении о независимости признаков, то p(y=1|...) + p(y=0| ...) некорректно отнормированы\n",
    "# и не будут суммироваться в 1. Не забудьте выполнить необходимую нормировку."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1daa083a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ab34439e",
   "metadata": {},
   "source": [
    "## 1.4 Используйте ваши функции для того чтобы сделать предсказание на тесте\n",
    "\n",
    "\n",
    "Для всех 6 уникальных комбинаций значений признаков сравните вероятности принадлежности классу 1\n",
    " - насколько они отличаются?\n",
    " - влияют ли эти отличия на предсказание класса объекта, при пороге $p = 0.5$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b36f3fd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm.notebook import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd4246f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_proba = []\n",
    "\n",
    "for _, (sex, pclass, _) in X_test.iterrows():\n",
    "    y_pred_proba.append(get_probability_survived_bayes_naive(pclass, sex))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aac56efd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db040d3a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9b07b1f5",
   "metadata": {},
   "source": [
    "## 1.5 Обучите имплементацию `MultinomialNB` из `sklearn`\n",
    "\n",
    "Тот же вопрос что и 1.4, прокомментируйте отличия в оценке вероятности ваших имлементаций и имплементации\n",
    "`MultinomialNB`. Влияют ли они на предсказание классов при стандартном пороге вероятности (p=0.5)? Заполните таблицу `probabilities`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf606069",
   "metadata": {},
   "outputs": [],
   "source": [
    "probabilities = pd.DataFrame()\n",
    "probabilities['Sex'] = [0,0,0,1,1,1]\n",
    "probabilities['Passenger Class'] = [1,2,3,1,2,3]\n",
    "probabilities['Bayes'] = [0]*6\n",
    "probabilities['BayesNaive'] = [0]*6\n",
    "probabilities['MultinomialNB'] = [0]*6\n",
    "\n",
    "probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d231a5fb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "86941059",
   "metadata": {},
   "source": [
    "## 2.1 Используя MultinomialNB обучите классификатор на бОльшем количестве признаков\n",
    "\n",
    "1. Подготовьте признаки \n",
    "- 'Passenger Class',\n",
    "- 'Sex',\n",
    "- 'Age',\n",
    "- 'No of Siblings or Spouses on Board',\n",
    "- 'No of Parents or Children on Board',\n",
    "- 'Port of Embarkation'\n",
    "\n",
    "для обучения:\n",
    "- закодируйте столбец `Port of Embarkation` по аналогии с `Passenger Class`\n",
    "- заполните пропуски в столбце `Age` средним возрастом в датасете используйте `pd.DataFrame.fillna(...)`\n",
    "- заполните пропуске в столбце `Port of Embarkation` самым частым портом посадки\n",
    "- для разбиения на тренировчную и тестовую часть данных используйте `train_size=0.66` и `random_state=5`\n",
    "\n",
    "2. обучите MultinomialNB модель на тренировочной части данных\n",
    "2. Как изменилась точность вашей модели на тестовой части данных по сравнению с моделью обученной на 2 признаках?\n",
    "3. Что означает признак `Life Boat`? Следуют ли на ваш взгляд включать его в список признаков для обучения модели? \n",
    "- Опишите сценарий (использования модели) в котором его следует включать в список признаков. \n",
    "- Опишите сценарий (использования модели) в котором его не следует включать в список признаков.\n",
    "5. Какая ошибка содержится в предложенной последовательности действий в п. 2.1? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d015de2",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.66, random_state=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21717ab2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e1ece380",
   "metadata": {},
   "source": [
    "## 2.2. Оценка важности признаков\n",
    "\n",
    "Мы воспользуемся простым (и не очень хорошим^[1]) методом оценки важности признаков:\n",
    "\n",
    "1. Воспользуйтесь моделью из п.2. Качество модели на тестовой части данных это ваш бейзлайн\n",
    "2. Исключая по 1 признаку из `X` обучайте модель `MultinomialNB` и измеряйте ее точность на тестовой части данных\n",
    "3. Сохраняйте величину падения или роста качества по сравнению с бейзлайном. Если точность упала значит признак \"полезный\", если выросло - \"вредный\". Абсолютная величина падения или роста в данном случае не так важна, важен только порядок признаков. Такая оценка называется качественной (в противовес количественной).\n",
    "4. Прокомментируйте полученный результат, насколько он согласуется с вашей интуицией?\n",
    "5. В чем на ваш взляд могут быть преимущества использования мЕньшего числа признаков при обучении моделей? (не обязательно в контексте данной задачи)\n",
    "\n",
    "\n",
    "[1] а впрочем какие из них хороши?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5757bd7e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6b71f0c8",
   "metadata": {},
   "source": [
    "jupyter notebook c вашим решением необходимо отправить на почту kurmukovai@gmail.com, с темой письма `[ml-ds-2024-ha1-Surname]`, например `[ml-ds-2023-Kurmukov]` до 12:00 МСК 08.02.2023. Задания отправленные до полуночи Вторника 06.02.2023 получают +1 балл в случае полного выполнения (не обязательно верного:))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36ebcc3b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f77e862",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
